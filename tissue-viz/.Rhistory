seq = ["ACTGATCGGCTATCGACTAGGGGCCTAGCTAGAGCTCTACATCGA"]
seq = ["ACTGATCGGCTATCGACTAGGGGCCTAGCTAGAGCTCTACATCGA"]
seq <- c("ACTGATCGGCTATCGACTAGGGGCCTAGCTAGAGCTCTACATCGA")
sss <- SplitSequence(seq)
SplitSequence <- function(data){
for(i in 1:length(data) ){
if(i==1){
seq <- unlist(strsplit(data[1],"",fixed = TRUE))
seq_matrix <- matrix(NA,nrow = length(data),ncol = length(seq))
seq_matrix[1,] <-  seq
}else{
seq_matrix[i,] <- unlist(strsplit(data[i],"",fixed = TRUE))
}
}
return(seq_matrix)
}
sss <- SplitSequence(seq)
sss
library(dplyr)
seq %>% seperate()
seperate(seq)
str_split(seq)
library(tidyverse)
str_split(seq)
str_split(seq,'')
unlist(str_split(seq,''))
seqs <- c(seq,seq,seq,seq)
seqs
str_split(seqs)
str_split(seqs,'')
unlist(str_split(seqs,''))
seqs
seqs %>% str_split("")
seqs %>% str_split("") %>% stack()
seqs[1] %>% str_split("") %>% stack()
seqs[[1]] %>% str_split("") %>% stack()
seqs[[1]] %>% str_split("")
seqs[1] %>% str_split("")
seqs %>% str_split("") %>% unlist()
SplitSequence <- function(data){
for(i in 1:length(data) ){
df <- NULL
new <- data[i] %>% str_split("")
df <- rbind(df,new)
}
return(df)
}
SplitSequence(seqs)
SplitSequence <- function(data){
df <- NULL
for(i in 1:length(data) ){
new <- data[i] %>% str_split("")
df <- rbind(df,new)
}
return(df)
}
SplitSequence(seqs)
i = 1
data[i] %>% str_split("")
seqs[i] %>% str_split("")
seqs[i] %>% str_split("") %>% unlist
seqs[i] %>% str_split("") %>% unlist()
new <- data[i] %>% str_split("") %>% unlist()
new <- seqs[i] %>% str_split("") %>% unlist()
new
df <- rbind(df,new)
df <- data.frame()
df <- rbind(df,new)
df
ncol(df)
seq(1,10)
ncol(df)
seq(1,ncol(df))
colnames(df) <- seq(1,ncol(df))
df
SplitSequence <- function(data){
df <- data.frame()
for(i in 1:length(data) ){
new <- data[i] %>% str_split("") %>% unlist()
df <- rbind(df,new)
}
colnames(df) <- seq(1,ncol(df))
return(df)
}
SplitSequence(seqs)
new_data <- SplitSequence(seqs)
new_data
new_data[1]
OneHot <- function(data){
new_data <- SplitSequence(data)
for (i in 1:ncol(new_data)){
new_data[i] %>% mutate(i = recode(1, "A" = 0, "C" = 1, "G" = 2, "T" = 3))
}
return(new_data)
}
OneHot(new_data)
OneHot <- function(data){
new_data <- SplitSequence(data)
for (i in 1:ncol(new_data)){
new_data %>% mutate(i = recode(1, "A" = 0, "C" = 1, "G" = 2, "T" = 3))
}
return(new_data)
}
OneHot(new_data)
new_data
new_data %>% mutate(1 = recode(1, "A" = 0, "C" = 1, "G" = 2, "T" = 3))
recode(new_data,  "A" = 0, "C" = 1, "G" = 2, "T" = 3))
recode(new_data[1],  "A" = 0, "C" = 1, "G" = 2, "T" = 3))
recode(new_data[1],  "A" = 0, "C" = 1, "G" = 2, "T" = 3)
type(new_data)
dtype(new_data)
class(new_data)
class(new_data[1])
class(new_data[[1]])
recode(new_data[[1]],  "A" = 0, "C" = 1, "G" = 2, "T" = 3)
i = 1
new_data %>% mutate(i = recode(i, "A" = 0, "C" = 1, "G" = 2, "T" = 3))
new_data %>% mutate(i = recode(new_data[[i]], "A" = 0, "C" = 1, "G" = 2, "T" = 3))
i = 1
new_data %>% mutate(i = recode(new_data[[i]], "A" = 0, "C" = 1, "G" = 2, "T" = 3))
new_data %>% mutate(new_data[i] = recode(new_data[[i]], "A" = 0, "C" = 1, "G" = 2, "T" = 3))
OneHot <- function(data){
new_data <- SplitSequence(data)
for (i in 1:ncol(new_data)){
new_data[i] = recode(new_data[[i]], "A" = 0, "C" = 1, "G" = 2, "T" = 3)
}
return(new_data)
}
OneHot(data)
new_data
i = 1
new_data[i] = recode(new_data[[i]], "A" = 0, "C" = 1, "G" = 2, "T" = 3)
new_data
for (i in 1:ncol(new_data)){
new_data[i] = recode(new_data[[i]], "A" = 0, "C" = 1, "G" = 2, "T" = 3)
}
i  =2
new_data[i] = recode(new_data[[i]], "A" = 0, "C" = 1, "G" = 2, "T" = 3)
OneHot <- function(data){
new_data <- SplitSequence(data)
for (i in 1:ncol(new_data)){
new_data <- new_data %>% mutate(i = recode(i, "A" = 0, "C" = 1, "G" = 2, "T" = 3))
# new_data[i] = recode(new_data[[i]], "A" = 0, "C" = 1, "G" = 2, "T" = 3)
}
return(new_data)
}
new_data
SplitSequence(new_data)
data
seqs
data = SplitSequence(seqs)
data
OneHot(data)
OneHot(data)
OneHot <- function(data){
# new_data <- SplitSequence(data)
for (i in 1:ncol(new_data)){
# new_data <- new_data %>% mutate(i = recode(i, "A" = 0, "C" = 1, "G" = 2, "T" = 3))
new_data[i] = recode(new_data[[i]], "A" = 0, "C" = 1, "G" = 2, "T" = 3)
}
return(new_data)
}
OneHot(data)
warnings()
OneHot(data)
data1 <- OneHot(data)
data1
OneHot <- function(data){
new_data <- SplitSequence(data)
for (i in 1:ncol(new_data)){
# new_data[i] = recode(new_data[[i]], "A" = 0, "C" = 1, "G" = 2, "T" = 3)
new_data %>% mutate(new_data[i], case_when(i == "A" ~ 0,
i == "C" ~ 1,
i == "G" ~ 2,
i == "T" ~ 3) )
}
return(new_data)
}
OneHot(data)
DATA
data
OneHot(data)
OneHot <- function(data){
# new_data <- SplitSequence(data)
for (i in 1:ncol(new_data)){
# new_data[i] = recode(new_data[[i]], "A" = 0, "C" = 1, "G" = 2, "T" = 3)
new_data %>% mutate(i, case_when(i == "A" ~ 0,
i == "C" ~ 1,
i == "G" ~ 2,
i == "T" ~ 3) )
}
return(new_data)
}
data
OneHot(data)
library(shiny); source('D:/git/DAVID-viz/shiny-run.R')
source('D:/git/DAVID-viz/shiny-run.R')
# This script is used to run the application defined in app.R in the background
setwd("D:/git/DAIVD-viz/")
source('D:/git/DAVID-viz/shiny-run.R')
source('D:/git/DAVID-viz/shiny-run.R')
library(readr)
RNAmod_diffmod_homo <- read_csv("C:/Users/dizhe/Downloads/RNAmod_diffmod_homo.csv")
View(RNAmod_diffmod_homo)
antisense
library(readr)
antisense <- read_csv("C:/Users/dizhe/Downloads/RNAmod_diffmod_homo.csv")
antisense
data1 <- antisense
data1$Gene_symbol
df1 <- data.frame(seqnames=data1$Chr,
starts=data1$Start,
ends=data1$End,
names=data1$Gene_symbol)
write.table(df1, file="antisense_diff.bed", quote=F, sep="\t", row.names=F, col.names=F)
getwd()
antisense <- read_csv("C:/Users/dizhe/Downloads/RNAmod_diffmod_homo.csv")
data1 <- antisense
df1 <- data.frame(seqnames=data1$Chr,
starts=data1$Start,
ends=data1$End,
names=data1$Gene_symbol)
install.packages("shinyjs")
library(shiny); runApp('C:/Users/dizhe/Desktop/shiny_3d.R')
library("colourpicker")
install.packages("colourpicker")
runApp('C:/Users/dizhe/Desktop/shiny_3d.R')
library(shiny); source('D:/git/m6a-seq-analysis-visualizer/david-viz1/shiny-run.R')
library(highcharter)
source('shiny-run.R')
library(dplyr)
library(ggplot2)
library(shiny)
library(shinyWidgets)
library(shinycssloaders)
library(highcharter)
library(stringr)
library(httr)
library(rdrop2)
library(readr)
source('shiny-run.R')
library(rsconnect)
rsconnect::deployApp(getwd(), account='jokerdii')
source('shiny-run.R')
rsconnect::deployApp(getwd(), account='jokerdii')
source('D:/git/m6a-seq-analysis-visualizer/tissue-viz/build.R')
library(rsconnect)
rsconnect::deployApp(getwd(), account='jokerdii')
# This script is used to run the application defined in app.R in the background
# setwd("D:/git/Shiny-Lego-master/")
setwd("D:/git/m6a-seq-analysis-visualizer/tissue-viz/")
options(shiny.autoreload = TRUE)
shiny::runApp()
shiny::runApp()
source('shiny-run.R')
rsconnect::deployApp(getwd(), account='jokerdii')
